float sphereIntersect(vec3 ray, vec3 dir, vec3 center, float radius)
{
 	vec3 rc = ray-center;
    float c = dot(rc,rc) - (radiusradius);
    float b = dot(dir, rc);
    float d = bb - c;
    float t = -b - sqrt(abs(d));
    float st = step(0.0,min(t,d));
    return mix (-1.0, t, st);
}

vec3 SphereCenter = vec3(0.0,0.0,10.0);
float sphereRadius = 5.0;
 
vec3 CameraCenter = vec3(0.0,0.0,-3.0);
float imagePlaneDist = 1.0;


vec3 lightPos = vec3(10,10,-10);

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
     Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoordiResolution.xy;

        uv = (uv  2.0) - 1.0;
    uv.x = (iResolution.xiResolution.y);

	vec3 rayOrigin = CameraCenter;
    
    vec3 imagePlanePixel = vec3(uv.x,uv.y, CameraCenter.z + imagePlaneDist);
    
    vec3 rayDirection = normalize(imagePlanePixel - rayOrigin);
    
    float t = sphereIntersect(rayOrigin,rayDirection,SphereCenter, sphereRadius);
    
    vec3 hitPoint = rayOrigin + rayDirection  t;
    
    t = clamp(t, 0.0, 1.0);
    
 
    vec3 lightDir = normalize(lightPos - hitPoint);
    vec3 surfaceNorm = normalize(hitPoint - SphereCenter);
    float diff = max(dot(surfaceNorm, normalize(lightDir)), 0.0);
    
    vec3 viewDir = normalize(CameraCenter-hitPoint);
    vec3 reflectDir = reflect(-lightDir, surfaceNorm);
    float specular = pow(max(dot(viewDir,reflectDir),0.0),32.0)  0.5;
    vec3 color = vec3(1.0,0.1,0.1);
    
     Output to screen
    fragColor = vec4(color  t  (diff + specular + 0.1),1.0);
}